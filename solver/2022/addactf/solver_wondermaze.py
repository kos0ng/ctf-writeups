from qiling import Qiling

ql = Qiling(['./libnative-lib.so'], '.')
ql.mem.map(0, 0x1000) # for FS:0x28
BASE = ql.loader.load_address

def root():
    a = [0x37,0x3F,0x3D,0x3B,0x37,0x39,0x6E,0x3E,0x39,0x6C,0x6C,0x3F,0x6D,0x69,0x37,0x3E,0x6B,0x69,0x3A,0x3F,0x3B,0x3A,0x3E,0x3B,0x38,0x3B,0x3D,0x36,0x3F,0x6C,0x3F,0x69,0x3B,0x6E,0x6C,0x39,0x39,0x3C,0x38,0x3D,0x3D,0x6C,0x39,0x6B,0x3F,0x6D,0x38,0x6E,0x36,0x3B,0x6B,0x3A,0x6A,0x3D,0x39,0x6C,0x6D,0x6B,0x6E,0x3A,0x3B,0x6B,0x3E,0x3A,0x3E,0x69,0x3C,0x36,0x6C,0x3C,0x3A,0x38,0x3E,0x3C,0x69,0x36,0x6A,0x6C,0x3A,0x6A,0x39,0x3B,0x6A,0x3A,0x3A,0x6E,0x3E,0x39,0x3B,0x6A,0x6E,0x3E,0x6E,0x3A,0x37,0x3D,0x36,0x38,0x69,0x3A,0x37,0x6B,0x6A,0x6C,0x36,0x38,0x39,0x3B,0x3C,0x3B,0x37,0x39,0x6D,0x3F,0x39,0x6D,0x6E,0x36,0x69,0x6E,0x3B,0x37,0x69,0x69,0x3C,0x39,0x6D,0x6A,0x3B,0x3C,0x6E,0x3D,0x6D,0x6C,0x3B,0x69,0x38,0x3B,0x3B,0x3A,0x3A,0x37,0x6A,0x3F,0x6E,0x6B,0x3D,0x3E,0x69,0x3C,0x69,0x37,0x6A,0x6A,0x6E,0x6B,0x36,0x6C,0x3A,0x6C,0x38,0x37,0x3B,0x6E,0x6B,0x3B,0x6A,0x36,0x3F,0x36,0x3C,0x3C,0x38,0x69,0x6B,0x6C,0x6B,0x69,0x6E,0x37,0x3B,0x3A,0x36,0x6B,0x69,0x6D,0x38,0x6B,0x3C,0x37,0x36,0x36,0x38,0x37,0x6B,0x37,0x3E,0x3C,0x3E,0x6A,0x36,0x3A,0x37,0x6A,0x3A,0x6C,0x3B,0x6B,0x3B,0x39,0x6B,0x39,0x36,0x39,0x3E,0x6B,0x69,0x3C,0x6D,0x38,0x6B,0x6D,0x6C,0x3E,0x36,0x3C,0x3C,0x3B,0x3F,0x38,0x6E,0x69,0x6C,0x36,0x6A,0x3E,0x39,0x6C,0x38,0x37,0x38,0x6B,0x3A,0x6C,0x3D,0x3F,0x6E,0x6B,0x6E,0x3F,0x3C,0x69,0x3C,0x6B,0x6A,0x6D,0x6E,0x3D,0x6D]
    val = ""
    for i in a:
        val += chr(i^0xf)
    return bytes.fromhex('0'+val)

def device_native():
    ql.run(BASE+0x1190, BASE+0x13D3)
    rsp = ql.arch.regs.rsp
    address = rsp
    size = 259
    res = ql.mem.read(address, size)
    return bytes.fromhex('0'+res.decode())

def time_native():
    ql.run(BASE+0x1640, BASE+0x17F2)
    rsp = ql.arch.regs.rsp
    address = rsp
    size = 259
    res = ql.mem.read(address, size)
    return bytes.fromhex('0'+res.decode())

arr = [root(),time_native(),device_native()]

flag = ""
for i in range(len(arr[0])):
    flag += chr(arr[0][i]^arr[1][i]^arr[2][i])
print(flag[::-1])