import gmpy2
from pwn import *
import time

# context.log_level = 'debug'
def solve_maze(a,start,end):
    m = []
    for i in range(len(a)):
        m.append([])
        for j in range(len(a[i])):
            m[-1].append(0)
    i,j = start
    m[i][j] = 1
    k = 0
    while m[end[0]][end[1]] == 0:
        k += 1
        make_step(k,m)
    i, j = end
    k = m[i][j]
    the_path = [(i,j)]
    while k > 1:
      if i > 0 and m[i - 1][j] == k-1:
        i, j = i-1, j
        the_path.append((i, j))
        k-=1
      elif j > 0 and m[i][j - 1] == k-1:
        i, j = i, j-1
        the_path.append((i, j))
        k-=1
      elif i < len(m) - 1 and m[i + 1][j] == k-1:
        i, j = i+1, j
        the_path.append((i, j))
        k-=1
      elif j < len(m[i]) - 1 and m[i][j + 1] == k-1:
        i, j = i, j+1
        the_path.append((i, j))
        k -= 1
    return the_path

def make_step(k,m):
  for i in range(len(m)):
    for j in range(len(m[i])):
      if m[i][j] == k:
        if i>0 and m[i-1][j] == 0 and a[i-1][j] == 0:
          m[i-1][j] = k + 1
        if j>0 and m[i][j-1] == 0 and a[i][j-1] == 0:
          m[i][j-1] = k + 1
        if i<len(m)-1 and m[i+1][j] == 0 and a[i+1][j] == 0:
          m[i+1][j] = k + 1
        if j<len(m[i])-1 and m[i][j+1] == 0 and a[i][j+1] == 0:
           m[i][j+1] = k + 1

def print_m(m):
    for i in range(len(m)):
        for j in range(len(m[i])):
            print( str(m[i][j]).ljust(2),end=' ')
        print()

def parse_map():
    snake_map = [[1 for _ in range(22)]]
    print("map")
    for i in range(20):
        line = [1]
        tmp = r.recvline().strip().decode()
        print(tmp)
        for j in tmp:
            if(j=='.'):
                line.append(0)
            elif(j=='o' or j=='#'):
                line.append(1)
            else:
                print('?',j)
        line.append(1)
        snake_map.append(line)
    snake_map.append([1 for _ in range(22)])
    return snake_map

def convert(pathh,start,pos):
    code = []
    curr = start
    for i in pathh[::-1]:
        if(i[0]>curr[0]):
            if(pos=='D'):
                code.append('1')
            elif(pos=='R'):
                code.append('L')
                code.append('1')
            elif(pos=='L'):
                code.append('R')
                code.append('1')
            elif(pos=='U'):
                code.append('R')
                code.append('R')
                code.append('1')
            pos = 'D'
        elif(i[0]<curr[0]):
            if(pos=='D'):
                code.append('R')
                code.append('R')
                code.append('1')
            elif(pos=='L'):
                code.append('L')
                code.append('1')
            elif(pos=='R'):
                code.append('R')
                code.append('1')
            elif(pos=='U'):
                code.append('1')
            pos = 'U'
        elif(i[1]>curr[1]):
            if(pos=='D'):
                code.append('L')
                code.append('1')
            elif(pos=='L'):
                code.append('1')
            elif(pos=='R'):
                code.append('R')
                code.append('R')
                code.append('1')
            elif(pos=='U'):
                code.append('R')
                code.append('1')
            pos = 'L'
        elif(i[1]<curr[1]):
            if(pos=='D'):
                code.append('R')
                code.append('1')
            elif(pos=='L'):
                code.append('R')
                code.append('R')
                code.append('1')
            elif(pos=='R'):
                code.append('1')
            elif(pos=='U'):
                code.append('L')
                code.append('1')
            pos = 'R'
        curr = i
    cnt = 0
    real_code = []
    for i in code:
        if(i == '1'):
            cnt += 1
        else:
            if(cnt!=0):
                real_code.append(str(cnt))
            real_code.append(i)   
            cnt = 0
    if(cnt!=0):
        real_code.append(str(cnt))
    # print(code)
    # print(real_code)
    return real_code, pos

# from level 1
list_food = [[(6, 12), (3, 4), (4, 9), (19, 6), (9, 5), (14, 19), (5, 16), (19, 9), (10, 0), (8, 6), (8, 9), (10, 9), (17, 12), (8, 3), (1, 3), (16, 7), (7, 7), (14, 9), (17, 5), (14, 12), (4, 11), (5, 12), (8, 11), (19, 8), (8, 14), (19, 14), (9, 16), (0, 16), (11, 16), (16, 3), (18, 12), (16, 18), (7, 18), (4, 7), (4, 1), (4, 4), (4, 16), (5, 5), (8, 4), (17, 1), (19, 1), (11, 0), (14, 17), (0, 6), (16, 2), (1, 13), (2, 15), (18, 5), (15, 12), (16, 11)],
[(6, 18), (6, 15), (17, 3), (5, 1), (17, 9), (14, 13), (5, 10), (8, 9), (14, 19), (11, 5), (10, 9), (9, 11), (8, 15), (2, 5), (1, 18), (12, 3), (14, 6), (15, 9), (14, 9), (3, 9), (5, 3), (17, 11), (4, 11), (5, 15), (8, 14), (11, 10), (2, 7), (9, 19), (2, 13), (6, 7), (18, 6), (6, 3), (14, 2), (5, 2), (12, 17), (3, 8), (3, 17), (17, 10), (17, 16), (0, 3), (2, 0), (17, 19), (8, 13), (2, 9), (10, 16), (15, 0), (13, 3), (1, 16), (13, 15), (18, 11)],
[(18, 17), (7, 17), (3, 1), (3, 10), (3, 16), (5, 13), (5, 1), (8, 3), (8, 18), (1, 12), (6, 2), (16, 16), (15, 17), (6, 17), (14, 0), (17, 2), (14, 9), (5, 3), (9, 1), (17, 14), (8, 11), (8, 5), (10, 5), (8, 17), (2, 7), (15, 4), (13, 1), (1, 5), (0, 13), (19, 17), (7, 9), (6, 13), (12, 8), (17, 7), (4, 13), (19, 1), (9, 9), (14, 17), (5, 14), (5, 17), (11, 9), (10, 7), (10, 1), (9, 15), (0, 12), (0, 15), (10, 19), (18, 2), (16, 11), (15, 15)],
[(3, 4), (14, 4), (12, 10), (3, 7), (4, 6), (5, 7), (19, 6), (4, 15), (19, 3), (0, 5), (0, 8), (11, 17), (2, 8), (15, 17), (7, 13), (3, 0), (4, 5), (14, 3), (14, 18), (3, 18), (12, 18), (3, 15), (19, 5), (8, 11), (19, 11), (0, 10), (11, 10), (13, 7), (10, 8), (0, 13), (2, 16), (15, 10), (7, 9), (7, 6), (16, 18), (12, 5), (4, 4), (4, 16), (4, 19), (19, 1), (17, 16), (19, 7), (9, 12), (11, 12), (0, 12), (13, 6), (7, 2), (18, 2), (13, 15), (15, 12)],
[(8, 0), (5, 13), (0, 2), (19, 3), (10, 0), (9, 8), (2, 2), (9, 17), (0, 8), (11, 8), (10, 15), (7, 4), (7, 1), (16, 10), (15, 14), (6, 8), (15, 17), (18, 13), (12, 3), (3, 6), (17, 11), (4, 17), (9, 7), (5, 12), (0, 4), (11, 13), (0, 19), (15, 13), (16, 6), (18, 12), (6, 10), (16, 18), (12, 11), (7, 18), (17, 4), (3, 11), (3, 14), (4, 19), (0, 3), (17, 19), (13, 0), (5, 17), (2, 3), (11, 18), (9, 18), (15, 6), (1, 13), (1, 10), (0, 18), (16, 17)],
[(4, 6), (4, 12), (9, 2), (3, 10), (17, 6), (17, 12), (11, 2), (9, 8), (9, 14), (10, 3), (9, 17), (17, 18), (2, 11), (0, 11), (15, 8), (12, 6), (4, 5), (3, 6), (3, 12), (19, 11), (9, 10), (19, 14), (8, 17), (15, 4), (11, 13), (2, 10), (10, 17), (1, 14), (16, 6), (15, 10), (6, 13), (15, 19), (6, 16), (16, 18), (12, 5), (3, 2), (17, 4), (4, 16), (17, 1), (3, 8), (3, 17), (8, 7), (1, 1), (9, 12), (11, 9), (19, 10), (2, 0), (2, 6), (7, 11), (15, 18)],
[(4, 0), (12, 7), (3, 4), (14, 7), (19, 0), (19, 6), (4, 15), (3, 19), (10, 0), (14, 19), (9, 14), (13, 11), (18, 1), (1, 15), (12, 3), (14, 6), (4, 5), (4, 14), (3, 12), (19, 2), (9, 1), (11, 1), (8, 14), (19, 14), (2, 7), (0, 13), (0, 19), (11, 19), (1, 14), (13, 16), (13, 13), (16, 12), (15, 19), (6, 19), (5, 2), (3, 8), (5, 5), (19, 4), (8, 4), (3, 14), (19, 7), (19, 10), (1, 4), (8, 13), (16, 2), (13, 6), (7, 2), (0, 18), (6, 3), (16, 11)],
[(7, 17), (9, 5), (0, 2), (10, 0), (14, 13), (9, 14), (13, 2), (9, 11), (19, 18), (8, 18), (16, 4), (1, 9), (16, 7), (13, 8), (15, 11), (1, 18), (2, 17), (13, 17), (15, 14), (7, 13), (4, 2), (12, 15), (4, 11), (19, 11), (17, 17), (11, 10), (19, 17), (8, 17), (1, 11), (11, 13), (0, 19), (13, 16), (6, 7), (6, 13), (16, 18), (7, 18), (17, 4), (19, 4), (4, 13), (4, 19), (14, 17), (10, 4), (13, 3), (15, 6), (9, 18), (2, 6), (2, 15), (16, 14), (7, 11), (7, 8)],
[(6, 18), (7, 17), (14, 4), (7, 5), (14, 1), (5, 16), (10, 6), (0, 17), (10, 15), (16, 7), (13, 14), (6, 5), (16, 13), (18, 19), (14, 6), (4, 14), (17, 5), (8, 2), (8, 5), (5, 18), (5, 12), (19, 8), (11, 7), (13, 4), (0, 16), (13, 10), (15, 7), (18, 0), (16, 6), (16, 12), (15, 10), (6, 13), (16, 15), (15, 19), (16, 18), (14, 2), (12, 11), (9, 0), (17, 7), (19, 7), (17, 13), (0, 9), (5, 17), (15, 0), (2, 6), (16, 5), (1, 10), (18, 5), (16, 17), (7, 14)],
[(12, 7), (3, 1), (12, 19), (3, 10), (9, 5), (8, 3), (10, 0), (3, 19), (17, 6), (9, 14), (5, 19), (10, 3), (17, 18), (11, 14), (2, 11), (2, 8), (15, 11), (16, 16), (6, 14), (3, 0), (3, 3), (5, 6), (17, 5), (3, 12), (4, 17), (8, 8), (0, 7), (2, 4), (9, 16), (13, 1), (1, 11), (2, 10), (6, 4), (18, 3), (6, 16), (7, 15), (7, 18), (4, 10), (5, 5), (4, 13), (3, 17), (0, 9), (5, 17), (9, 15), (8, 19), (1, 7), (16, 5), (7, 2), (6, 6), (13, 15)]
][::-1]

list_target = []
target = 140447092963680462851258172325
for cnt in range(len(list_food)):
	for i in range(400):
		tmp = target - i
		if(gmpy2.gcd(tmp,20**2)==20**2):
			for j in list_food[cnt]:
				if(j[0]*20+j[1] == i):
					# print(cnt,j)
					list_target.append(j)
					target -= i
					target //= 20**2
					target ^= 1337
					break

list_target = list_target[::-1]
print(list_target,len(list_target))
r = remote("lac.tf",31133)
start = 1,1
pos = 'D'
for y in range(10):
	if(y==0):
		a = parse_map()  
	else:
		for z in range(int(path_code[-1])):
			parse_map()
			r.recvline()
		a = parse_map()
    # print(a)
	end = (list_target[y][0]+1,list_target[y][1]+1)
	for xx in a:
		print(xx)
	print(y,start,end)
	a[list_target[y][0]+1][list_target[y][1]+1] = 0
	pathh = solve_maze(a,start,end)[:-1]
	print(pathh)
	path_code,pos = convert(pathh,(start),pos)
	print(path_code)
	cnt = 0
	for i in range(len(path_code)):
	    # print(path_code[i],(pathh[::-1][cnt][0]-1,pathh[::-1][cnt][1]-1),pathh[::-1][cnt])
	    r.recvline()
	    r.recvuntil(b"? ")
	    r.sendline(path_code[i].encode())
	    # parse_map()
	    # r.recvline()
	    # parse_map()
	start = end
r.interactive()


